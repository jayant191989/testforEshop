@model HR_Management.Web.ViewModels.StoreProductsViewModel

<div id="myModal" class="modal fade" role="dialog" >

    @using (Html.BeginForm("_Edit", "StoreProducts", FormMethod.Post, new { @id = "frmEdit" }))
    {
        @Html.ValidationSummary(true)
        @Html.AntiForgeryToken()

        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <h4 class="modal-title" id="myModalLabel">
                        <label>Edit Store Product Detail</label>
                    </h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12"><div class="form-group" id="popupError"></div></div>
                    </div>
                    <p id="MessageToClient" class="text-danger"></p>
                    <div class="form-horizontal">
                        @Html.HiddenFor(s => s.BatchId)
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(p => p.ProductId, new { id = "hiddenproductid" })

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProductEnterDate, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-6">
                                        @Html.EditorFor(model => model.ProductEnterDate , "EditorDate")
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="control-label col-md-4">Product Name</label>
                                    <div class="col-md-6">
                                        @*<input id="productName" data-url="@Url.Action("GetProductsForAutocomplete", "Products")" class="ui-autocomplete-input form-control" />*@
                                        @Html.EditorFor(model => model.ProductName, new
                                   {
                                       htmlAttributes = new
                                       {
                                           @class = "ui-autocomplete-input form-control",
                                           data_url = @Url.Action("GetProductsForAutocomplete", "Products")
                                       }
                                   })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="control-label col-md-4">Code</label>
                                    <div class="col-md-6">
                                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", @placeholder = "Code" , @readonly = "readonly" } })
                                        @*<input id="productCode" class="form-control" readonly />*@
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="control-label col-md-4">Auto Generate Name</label>
                                    <div class="col-md-6">
                                        @Html.EditorFor(model => model.AutoGenerateName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Code", @readonly = "AutoGenerateName" } })
                                        @*<input id="autoGeneterateName" class="form-control" readonly />*@
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-md-4">Model Number</label>
                                    <div class="col-md-6">
                                        @Html.EditorFor(model => model.ModelNumber, new { htmlAttributes = new { @class = "form-control", @placeholder = "Code", @readonly = "ModelNumber" } })
                                        @*<input id="modelNumber" class="form-control" readonly />*@
                                    </div>
                                </div>

                            </div>
                            <div class="col-md-6">

                                <div class="form-group">
                                    @Html.LabelFor(model => model.CostPricePerUnit, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-6">
                                        @Html.EditorFor(model => model.CostPricePerUnit, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CostPricePerUnit, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.DiscountRatePerUnit, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-6">
                                        @Html.EditorFor(model => model.DiscountRatePerUnit, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.DiscountRatePerUnit, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.MRPPerUnit, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-6">
                                        @Html.EditorFor(model => model.MRPPerUnit, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.MRPPerUnit, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-6">
                                        @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>
                        </div>

                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default CloseUser" data-dismiss="modal">Close &raquo;</button>
                    <button type="submit" class="btn btn-primary SaveUser">Save &raquo;</button>
                </div>
            </div>
        </div>
    }
</div>

<script>
    $("#ProductName").autocomplete({
        minLength: 1,
        source: function (request, response) {
            var url = $(this.element).data("url");
            $.getJSON(url, { term: request.term }, function (data) {
                response(data)
            })
        },
        appendTo: $(".modal-body"),
        select: function (event, ui) {
            $("#hiddenproductid").val(ui.item.Id);
            $("#ProductId").val(ui.item.Name);
            $("#Code").val(ui.item.Code);
            $("#AutoGenerateName").val(ui.item.AutoGenerateName);
            $("#ModelNumber").val(ui.item.ModelNumber);
            $("#CostPricePerUnit").select();
        },
        change: function (event, ui) {
            if (!ui.item) {
                $(event.target).val("");
            }
        }

    })
</script>
